//////////////////////////////////////////////////////////////////////////////
//// TODO, info

LL1, no conflicts (except if-else)
without switch, use if-else instead
without comma operator, i.e. for(a = 0, b = 0; a < 5; a++)
without ternary operator ? :
without bit operators
references???

handle break/continue in the parser to be only inside of a loop


//////////////////////////////////////////////////////////////////////////////
//// Terminal symbols

include define function return if else while for foreach break continue { } ( ) [ ] , ; . ! = += -= *= /= %= || && < > <= >= == != + - * / % ++ -- null true false int_const float_const string_const name


//////////////////////////////////////////////////////////////////////////////
//// Non-terminal symbols

S PARAMS PARAMSC BLOCK CMD CMDELSE EE E EC A AC B BC C CC D DC F FC G EXT EXTC CALLPARAMS CALLPARAMSC


//////////////////////////////////////////////////////////////////////////////
//// Start symbol

S


//////////////////////////////////////////////////////////////////////////////
//// Rules

S -> include ( string_const ) S ;
S -> define ( string_const , string_const ) S ;
S -> function name ( PARAMS ) { BLOCK } S
S ->

PARAMS -> name PARAMSC
PARAMS ->

PARAMSC -> , name PARAMSC
PARAMSC ->

BLOCK -> CMD BLOCK
BLOCK ->

CMD -> { BLOCK }
CMD -> ;
CMD -> E ;
CMD -> return EE ;
CMD -> break ;
CMD -> continue ;
CMD -> while ( E ) CMD
CMD -> for ( EE ; EE ; EE ) CMD
CMD -> if ( E ) CMD CMDELSE
CMD -> foreach ( name ; E ) CMD

CMDELSE -> else CMD
CMDELSE ->

EE -> E
EE ->

E -> A EC
E -> + A EC
E -> - A EC
E -> ! A EC

EC -> = A EC
EC -> += A EC
EC -> -= A EC
EC -> *= A EC
EC -> /= A EC
EC -> %= A EC
EC ->

A -> B AC

AC -> || B AC
AC ->

B -> C BC

BC -> && C BC
BC ->

C -> D CC

CC -> < D CC
CC -> > D CC
CC -> <= D CC
CC -> >= D CC
CC -> == D CC
CC -> != D CC
CC ->

D -> F DC

DC -> + F DC
DC -> - F DC
DC ->

F -> G FC

FC -> * G FC
FC -> / G FC
FC -> % G FC
FC ->

G -> null
G -> true
G -> false
G -> int_const
G -> float_const
G -> string_const
G -> ( E )
G -> name EXT
G -> ++ name EXT
G -> -- name EXT

EXT -> ( CALLPARAMS ) EXTC
EXT -> EXTC

EXTC -> [ E ] EXTC
EXTC -> . name EXT
EXTC -> ++
EXTC -> --
EXTC ->

CALLPARAMS -> E CALLPARAMSC
CALLPARAMS ->

CALLPARAMSC -> , E CALLPARAMSC
CALLPARAMSC ->

