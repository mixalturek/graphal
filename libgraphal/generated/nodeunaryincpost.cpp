/*
 *      Copyright 2008 Michal Turek <http://woq.nipax.cz/>
 *
 *      This program is free software; you can redistribute it and/or modify
 *      it under the terms of the GNU General Public License as published by
 *      the Free Software Foundation; either version 2 of the License, or
 *      (at your option) any later version.
 *
 *      This program is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU General Public License for more details.
 *
 *      You should have received a copy of the GNU General Public License
 *      along with this program; if not, write to the Free Software
 *      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 *      MA 02110-1301, USA.
 */

/****************************************************************************
 *                                                                          *
 *           This file was generated by gen_operators.pl script.            *
 *                        Don't update it manually!                         *
 *                                                                          *
 ****************************************************************************/

#include "valuebool.h"
#include "generated/nodeunaryincpost.h"
#include "value.h"


/////////////////////////////////////////////////////////////////////////////
////

NodeUnaryIncPost::NodeUnaryIncPost(Node* next)
	: NodeUnary(next)
{

}

NodeUnaryIncPost::~NodeUnaryIncPost(void)
{

}


/////////////////////////////////////////////////////////////////////////////
////


CountPtr<Value> NodeUnaryIncPost::execute(void)
{
	CountPtr<Value> tmp(m_next->execute());
	CountPtr<Value> ret(tmp->getReferredValue());
	tmp->assign(tmp->add(*VALUEBOOL_TRUE));
	return ret;
}

void NodeUnaryIncPost::dump(ostream& os, uint indent) const
{
	dumpIndent(os, indent);
	os << "<NodeUnaryIncPost>" << endl;

	m_next->dump(os, indent+1);

	dumpIndent(os, indent);
	os << "</NodeUnaryIncPost>" << endl;
}

ostream& operator<<(ostream& os, const NodeUnaryIncPost& node)
{
	node.dump(os, 0);
	return os;
}

